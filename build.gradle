plugins {
    id 'checkstyle'
    id 'application'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'pmd'
    id "com.github.ben-manes.versions" version "0.21.0"
    id "com.github.spotbugs" version "2.0.0"
    id "net.thauvin.erik.gradle.semver" version "1.0.4"
    id "org.sonarqube" version "2.7.1"
}


import com.github.spotbugs.SpotBugsTask

defaultTasks 'deploy'

final def packageName = 'net.thauvin.erik.mobibot'
final def deployDir = 'deploy'
final def semverProcessor = "net.thauvin.erik:semver:1.2.0"

mainClassName = packageName + '.Mobibot'

ext {
    versions = [
        kotlin : '1.3.40',
        log4j : '2.12.0',
        spotbugs_annotations : '4.0.0-beta3'
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    annotationProcessor semverProcessor
    compileOnly semverProcessor

    compile 'pircbot:pircbot:1.5.0'
    compileOnly 'pircbot:pircbot:1.5.0:sources'

    compile "org.apache.logging.log4j:log4j-api:$versions.log4j"
    compile "org.apache.logging.log4j:log4j-core:$versions.log4j"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$versions.log4j"

    compile 'commons-cli:commons-cli:1.4'

    compile 'commons-net:commons-net:3.6'
    compile 'com.squareup.okhttp3:okhttp:4.0.1'

    compile 'com.rometools:rome:1.12.1'

    compile 'org.json:json:20180813'
    compile 'org.jsoup:jsoup:1.12.1'
    compile 'net.objecthunter:exp4j:0.4.8'

    compile 'org.twitter4j:twitter4j-core:4.0.7'
    compile 'net.thauvin.erik:pinboard-poster:1.0.1'

    compile 'net.aksingh:owm-japis:2.5.3.0'
    // Override own-japis dependencies with newer version of Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"

    testImplementation 'org.testng:testng:6.14.3'
    testImplementation 'org.assertj:assertj-core:3.13.1'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.9.0'
    spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.4.6'

    compileOnly "com.github.spotbugs:spotbugs-annotations:$versions.spotbugs_annotations"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$versions.spotbugs_annotations"
}

test {
    useTestNG() {
        suites('src/test/resources/testng.xml')
    }
}

pmd {
    ruleSetFiles = files("config/pmd.xml")
    ruleSets = []
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.annotationProcessorGeneratedSourcesDirectory = file("${projectDir}/src/generated/java")
    options.compilerArgs += [ "-Asemver.project.dir=$projectDir" ]
}

compileJava {
    dependsOn('incrementBuildMeta')
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

javadoc {
    options.tags = ['created']
    options.author = true
    options.links('http://www.jibble.org/javadocs/pircbot/', 'http://docs.oracle.com/javase/8/docs/api/')
}

jar {
    manifest.attributes('Main-Class': mainClassName,
            'Class-Path': '. ./lib/' + configurations.compile.collect { it.getName() }.join(' ./lib/'))

    version = null
}

clean {
    doLast {
        project.delete(fileTree(deployDir))
    }
}

run {
    args '--v'
}

incrementBuildMeta {
    doFirst {
        if (!System.getenv('CI')) {
            buildMeta = sprintf("%03d", (buildMeta as Integer) + 1)
        } else {
            println "No increment on CIs."
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "ethauvin_mobibot"
    }
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    excludeFilter = file("$projectDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.sonarqube {
    dependsOn("jacocoTestReport")
}

task copyToDeploy(type: Copy) {
    from('properties')
    from jar
    into deployDir
}

task copyToDeployLib(type: Copy) {
    from(configurations.runtime) {
        exclude 'annotations-*.jar'
    }
    into deployDir + '/lib'
}

task deploy(dependsOn: ['clean', 'build', 'jar']) {
    description = 'Copies all needed files to the ${deployDir} directory.'
    group = 'Publishing'
    outputs.dir deployDir
    inputs.files copyToDeploy
    inputs.files copyToDeployLib
    doLast {
        file(deployDir + '/logs').mkdir()
    }
    mustRunAfter clean
}

task release(dependsOn: ['wrapper', 'clean', 'deploy']) {
    group = 'Publishing'
    description = 'Releases new version.'
}
