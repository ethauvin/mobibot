<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:FeedsManager.kt$FeedsManager.Companion$@JvmStatic fun saveFeed(entries: Entries, currentFile: String = CURRENT_XML)</ID>
    <ID>CyclomaticComplexMethod:Weather2.kt$Weather2.Companion$@JvmStatic @Throws(ModuleException::class) fun getWeather(query: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>LongMethod:FeedsManager.kt$FeedsManager.Companion$@JvmStatic fun saveFeed(entries: Entries, currentFile: String = CURRENT_XML)</ID>
    <ID>LongMethod:Mobibot.kt$Mobibot.Companion$@JvmStatic @Throws(Exception::class) fun main(args: Array&lt;String&gt;)</ID>
    <ID>LongMethod:StockQuote2.kt$StockQuote2.Companion$@JvmStatic @Throws(ModuleException::class) fun getQuote(symbol: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>LongMethod:Weather2.kt$Weather2.Companion$@JvmStatic @Throws(ModuleException::class) fun getWeather(query: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>LongParameterList:Comment.kt$Comment$( channel: String, cmd: String, entry: EntryLink, entryIndex: Int, commentIndex: Int, event: GenericMessageEvent )</ID>
    <ID>LongParameterList:EntryLink.kt$EntryLink$( // Link's comments val comments: MutableList&lt;EntryComment&gt; = mutableListOf(), // Tags/categories val tags: MutableList&lt;SyndCategory&gt; = mutableListOf(), // Channel var channel: String, // Creation date var date: Date = Calendar.getInstance().time, // Link's URL var link: String, // Author's login var login: String = "", // Author's nickname var nick: String, // Link's title var title: String )</ID>
    <ID>MagicNumber:Comment.kt$Comment$3</ID>
    <ID>MagicNumber:CryptoPrices.kt$CryptoPrices$10</ID>
    <ID>MagicNumber:CurrencyConverter2.kt$CurrencyConverter2$11</ID>
    <ID>MagicNumber:CurrencyConverter2.kt$CurrencyConverter2.Companion$3</ID>
    <ID>MagicNumber:CurrencyConverter2.kt$CurrencyConverter2.Companion$4</ID>
    <ID>MagicNumber:Cycle.kt$Cycle$10</ID>
    <ID>MagicNumber:Cycle.kt$Cycle$1000L</ID>
    <ID>MagicNumber:Ignore.kt$Ignore$8</ID>
    <ID>MagicNumber:Info.kt$Info.Companion$30</ID>
    <ID>MagicNumber:Info.kt$Info.Companion$365</ID>
    <ID>MagicNumber:Info.kt$Info.Companion$7</ID>
    <ID>MagicNumber:Mastodon.kt$Mastodon.Companion$200</ID>
    <ID>MagicNumber:Mobibot.kt$Mobibot$8</ID>
    <ID>MagicNumber:Modules.kt$Modules$7</ID>
    <ID>MagicNumber:Seen.kt$Seen$7</ID>
    <ID>MagicNumber:SocialManager.kt$SocialManager$1000L</ID>
    <ID>MagicNumber:SocialManager.kt$SocialManager$60L</ID>
    <ID>MagicNumber:StockQuote2.kt$StockQuote2.Companion$10</ID>
    <ID>MagicNumber:StockQuote2.kt$StockQuote2.Companion$4</ID>
    <ID>MagicNumber:Tell.kt$Tell$50</ID>
    <ID>MagicNumber:Tell.kt$Tell$7</ID>
    <ID>MagicNumber:Users.kt$Users$8</ID>
    <ID>MagicNumber:Utils.kt$Utils$200</ID>
    <ID>MagicNumber:Utils.kt$Utils$30</ID>
    <ID>MagicNumber:Utils.kt$Utils$399</ID>
    <ID>MagicNumber:Utils.kt$Utils.HttpClientManager$10</ID>
    <ID>MagicNumber:Weather2.kt$Weather2.Companion$1.60934</ID>
    <ID>MagicNumber:Weather2.kt$Weather2.Companion$32</ID>
    <ID>MagicNumber:Weather2.kt$Weather2.Companion$404</ID>
    <ID>MagicNumber:Weather2.kt$Weather2.Companion$5</ID>
    <ID>MagicNumber:Weather2.kt$Weather2.Companion$9</ID>
    <ID>MagicNumber:WorldTime.kt$WorldTime$14</ID>
    <ID>MagicNumber:WorldTime.kt$WorldTime$4</ID>
    <ID>MagicNumber:WorldTime.kt$WorldTime.Companion$3600</ID>
    <ID>MagicNumber:WorldTime.kt$WorldTime.Companion$60</ID>
    <ID>MagicNumber:WorldTime.kt$WorldTime.Companion$86.4</ID>
    <ID>NestedBlockDepth:Addons.kt$Addons$fun add(command: AbstractCommand): Boolean</ID>
    <ID>NestedBlockDepth:Addons.kt$Addons$fun add(module: AbstractModule): Boolean</ID>
    <ID>NestedBlockDepth:Comment.kt$Comment$override fun commandResponse(channel: String, args: String, event: GenericMessageEvent)</ID>
    <ID>NestedBlockDepth:CurrencyConverter2.kt$CurrencyConverter2.Companion$@JvmStatic fun convertCurrency(query: String): Message</ID>
    <ID>NestedBlockDepth:EntryLink.kt$EntryLink$private fun setTags(tags: List&lt;String?&gt;)</ID>
    <ID>NestedBlockDepth:FeedsManager.kt$FeedsManager.Companion$@JvmStatic @Throws(IOException::class, FeedException::class) fun loadFeed(entries: Entries, currentFile: String = CURRENT_XML): String</ID>
    <ID>NestedBlockDepth:FeedsManager.kt$FeedsManager.Companion$@JvmStatic fun saveFeed(entries: Entries, currentFile: String = CURRENT_XML)</ID>
    <ID>NestedBlockDepth:GoogleSearch.kt$GoogleSearch$override fun commandResponse(channel: String, cmd: String, args: String, event: GenericMessageEvent)</ID>
    <ID>NestedBlockDepth:GoogleSearch.kt$GoogleSearch.Companion$@JvmStatic @Throws(ModuleException::class) fun searchGoogle( query: String, apiKey: String?, cseKey: String?, quotaUser: String = ReleaseInfo.PROJECT ): List&lt;Message&gt;</ID>
    <ID>NestedBlockDepth:LinksManager.kt$LinksManager$override fun commandResponse(channel: String, args: String, event: GenericMessageEvent)</ID>
    <ID>NestedBlockDepth:Lookup.kt$Lookup$override fun commandResponse(channel: String, cmd: String, args: String, event: GenericMessageEvent)</ID>
    <ID>NestedBlockDepth:Mastodon.kt$Mastodon.Companion$@JvmStatic @Throws(ModuleException::class) fun toot(accessToken: String?, instance: String?, handle: String?, message: String, isDm: Boolean): String</ID>
    <ID>NestedBlockDepth:Posting.kt$Posting$override fun commandResponse(channel: String, args: String, event: GenericMessageEvent)</ID>
    <ID>NestedBlockDepth:Seen.kt$Seen$override fun commandResponse(channel: String, args: String, event: GenericMessageEvent)</ID>
    <ID>NestedBlockDepth:StockQuote2.kt$StockQuote2.Companion$@JvmStatic @Throws(ModuleException::class) fun getQuote(symbol: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>NestedBlockDepth:StockQuote2.kt$StockQuote2.Companion$@JvmStatic @Throws(ModuleException::class) fun lookup(keywords: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>NestedBlockDepth:Tell.kt$Tell$fun send(event: GenericUserEvent)</ID>
    <ID>NestedBlockDepth:Utils.kt$Utils$@JvmStatic fun loadSerialData(file: String, default: Any, logger: Logger, description: String): Any</ID>
    <ID>NestedBlockDepth:Utils.kt$Utils$@JvmStatic fun saveSerialData(file: String, data: Any, logger: Logger, description: String)</ID>
    <ID>NestedBlockDepth:Weather2.kt$Weather2$override fun commandResponse(channel: String, cmd: String, args: String, event: GenericMessageEvent)</ID>
    <ID>NestedBlockDepth:Weather2.kt$Weather2.Companion$@JvmStatic @Throws(ModuleException::class) fun getWeather(query: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>ReturnCount:Addons.kt$Addons$fun exec(channel: String, cmd: String, args: String, event: GenericMessageEvent): Boolean</ID>
    <ID>ReturnCount:Addons.kt$Addons$fun help(channel: String, topic: String, event: GenericMessageEvent): Boolean</ID>
    <ID>ReturnCount:ExceptionSanitizer.kt$ExceptionSanitizer$fun ModuleException.sanitize(vararg sanitize: String): ModuleException</ID>
    <ID>ReturnCount:Seen.kt$Seen$override fun commandResponse(channel: String, args: String, event: GenericMessageEvent)</ID>
    <ID>ThrowsCount:GoogleSearch.kt$GoogleSearch.Companion$@JvmStatic @Throws(ModuleException::class) fun searchGoogle( query: String, apiKey: String?, cseKey: String?, quotaUser: String = ReleaseInfo.PROJECT ): List&lt;Message&gt;</ID>
    <ID>ThrowsCount:Joke.kt$Joke.Companion$@JvmStatic @Throws(ModuleException::class) fun randomJoke(): List&lt;Message&gt;</ID>
    <ID>ThrowsCount:Mastodon.kt$Mastodon.Companion$@JvmStatic @Throws(ModuleException::class) fun toot(accessToken: String?, instance: String?, handle: String?, message: String, isDm: Boolean): String</ID>
    <ID>ThrowsCount:StockQuote2.kt$StockQuote2.Companion$@JvmStatic @Throws(ModuleException::class) fun getQuote(symbol: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>ThrowsCount:StockQuote2.kt$StockQuote2.Companion$@JvmStatic @Throws(ModuleException::class) fun lookup(keywords: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>ThrowsCount:Weather2.kt$Weather2.Companion$@JvmStatic @Throws(ModuleException::class) fun getWeather(query: String, apiKey: String?): List&lt;Message&gt;</ID>
    <ID>ThrowsCount:WolframAlpha.kt$WolframAlpha.Companion$@JvmStatic @Throws(ModuleException::class) fun queryWolfram(query: String, units: String = IMPERIAL, appId: String?): String</ID>
    <ID>TooGenericExceptionCaught:ChatGpt2.kt$ChatGpt2.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Gemini2.kt$Gemini2.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:StockQuote2.kt$StockQuote2.Companion$e: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:Utils.kt$Utils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Weather2.kt$Weather2.Companion$e: NullPointerException</ID>
    <ID>TooManyFunctions:EntryLink.kt$EntryLink : Serializable</ID>
    <ID>TooManyFunctions:Mobibot.kt$Mobibot : ListenerAdapter</ID>
    <ID>TooManyFunctions:Tell.kt$Tell : AbstractCommand</ID>
    <ID>UtilityClassWithPublicConstructor:LocalProperties.kt$LocalProperties</ID>
    <ID>WildcardImport:AddonTests.kt$import net.thauvin.erik.mobibot.modules.*</ID>
    <ID>WildcardImport:CryptoPricesTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:EntryLinkTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:FeedMgrTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:FeedReaderTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:FeedsManager.kt$import com.rometools.rome.feed.synd.*</ID>
    <ID>WildcardImport:Gemini2Tests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:GoogleSearchTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:JokeTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:LinksManagerTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:Mobibot.kt$import java.io.*</ID>
    <ID>WildcardImport:Mobibot.kt$import net.thauvin.erik.mobibot.commands.*</ID>
    <ID>WildcardImport:Mobibot.kt$import net.thauvin.erik.mobibot.commands.links.*</ID>
    <ID>WildcardImport:Mobibot.kt$import net.thauvin.erik.mobibot.modules.*</ID>
    <ID>WildcardImport:Mobibot.kt$import org.pircbotx.hooks.events.*</ID>
    <ID>WildcardImport:ModuleExceptionTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:RecapTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:SeenTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:StockQuote2Tests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:TellMessagesMgrTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:Utils.kt$import java.io.*</ID>
    <ID>WildcardImport:Weather2Tests.kt$import assertk.assertions.*</ID>
  </CurrentIssues>
</SmellBaseline>
